// Code generated by mockery v2.40.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/Federico191/freepass-2024/internal/entity"
	mock "github.com/stretchr/testify/mock"

	model "github.com/Federico191/freepass-2024/internal/model"
)

// UserUseCaseInterface is an autogenerated test type for the UserUseCaseInterface type
type UserUseCaseInterface struct {
	mock.Mock
}

// Login provides a test function with given fields: ctx, req
func (_m *UserUseCaseInterface) Login(ctx context.Context, req model.UserLogin) (entity.User, string, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 entity.User
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserLogin) (entity.User, string, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.UserLogin) entity.User); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.UserLogin) string); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, model.UserLogin) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Register provides a test function with given fields: ctx, req
func (_m *UserUseCaseInterface) Register(ctx context.Context, req model.UserRegister) (entity.User, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserRegister) (entity.User, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.UserRegister) entity.User); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.UserRegister) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserUseCaseInterface creates a new instance of UserUseCaseInterface. It also registers a testing interface on the test and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUseCaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUseCaseInterface {
	mock := &UserUseCaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
